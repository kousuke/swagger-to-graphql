type Query {
  """Multiple status values can be provided with comma separated strings"""
  findPetsByStatus(status: [String!]!): [Pet!]!

  """
  Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  """
  findPetsByTags(tags: [String!]!): [Pet!]!

  """Returns a single pet"""
  getPetById(petId: String!): Pet!

  """Returns a map of status codes to quantities"""
  getInventory: JSON!

  """
  For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
  """
  getOrderById(orderId: String!): Order!

  """"""
  loginUser(username: String!, password: String!): String!

  """"""
  logoutUser: JSON!

  """"""
  getUserByName(username: String!): User!
}

type Pet {
  id: String
  category: Category
  name: String!
  photoUrls: [String!]!
  tags: [Tag!]
  status: String
}

type Category {
  id: String
  name: String
}

type Tag {
  id: String
  name: String
}

scalar JSON

type Order {
  id: String
  petId: String
  quantity: Int
  shipDate: String
  status: String
  complete: Boolean
}

type User {
  id: String
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  userStatus: Int
}

type Mutation {
  """"""
  addPet(body: PetInput!): JSON!

  """"""
  updatePet(body: PetInput!): JSON!

  """"""
  updatePetWithForm(petId: String!, name: String, status: String): JSON!

  """"""
  deletePet(petId: String!): JSON!

  """"""
  placeOrder(body: OrderInput!): Order!

  """
  For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
  """
  deleteOrder(orderId: String!): JSON!

  """This can only be done by the logged in user."""
  createUser(body: UserInput!): JSON!

  """"""
  createUsersWithArrayInput(body: [UserInput!]!): JSON!

  """"""
  createUsersWithListInput(body: [UserInput!]!): JSON!

  """This can only be done by the logged in user."""
  updateUser(username: String!, body: UserInput!): JSON!

  """This can only be done by the logged in user."""
  deleteUser(username: String!): JSON!
}

input PetInput {
  id: String
  category: CategoryInput
  name: String!
  photoUrls: [String!]!
  tags: [TagInput!]
  status: String
}

input CategoryInput {
  id: String
  name: String
}

input TagInput {
  id: String
  name: String
}

input OrderInput {
  id: String
  petId: String
  quantity: Int
  shipDate: String
  status: String
  complete: Boolean
}

input UserInput {
  id: String
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  userStatus: Int
}
